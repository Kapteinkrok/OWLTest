"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HttpRequestBuilder = require('../http/http-request-builder');

var User = require('../auth/user');
/**
 * Service dealing with user authentication in a secured server.
 *
 * @author Mihail Radkov
 * @author Svilen Velikov
 */


var AuthenticationService =
/*#__PURE__*/
function () {
  /**
   * Instantiates the service with the provided HTTP request executor.
   *
   * @param {HttpClient} [httpClient] used to execute HTTP requests
   */
  function AuthenticationService(httpClient) {
    _classCallCheck(this, AuthenticationService);

    this.httpClient = httpClient;
  }
  /**
   * Performs a login request against secured server with provided username and
   * password. Upon successful authentication a {@link User} instance is created
   * with the user data and the auth token and returned to the client.
   *
   * @param {string} username is the username of the logged in user
   * @param {string} pass is the password of the logged in user
   *
   * @return {Promise<User>} a promise resolving to an authenticated
   * {@link User} instance.
   */


  _createClass(AuthenticationService, [{
    key: "login",
    value: function login(username, pass) {
      var _this = this;

      if (!this.shouldAuthenticate(username, pass)) {
        return Promise.resolve();
      }

      var requestBuilder = HttpRequestBuilder.httpPost("/rest/login/".concat(username)).addGraphDBPasswordHeader(pass);
      return this.httpClient.request(requestBuilder).then(function (response) {
        var token = response.headers['authorization'];
        var user = new User(token, pass, response.data);

        _this.setLoggedUser(user);

        return user;
      });
    }
    /**
     * Performs a logout of logged in user. This effectively removes the stored in
     * the client user. Every consecutive call against secured server will result
     * in <code>Unauthorized</code> error with status code <code>401</code>.
     *
     * @return {Promise} returns a promise which resolves with undefined.
     */

  }, {
    key: "logout",
    value: function logout() {
      this.getLoggedUser() && this.getLoggedUser().clearToken();
      return Promise.resolve();
    }
    /**
     * Return an effective valid token as string which is going to be send as a
     * request header <code>Authorization: token</code>. If there is no logged in
     * user, then this method returns <code>undefined</code>.
     *
     * @return {string|undefined}
     */

  }, {
    key: "getAuthentication",
    value: function getAuthentication() {
      return this.getLoggedUser() && this.getLoggedUser().getToken();
    }
    /**
     * Checks if user credentials are provided and there isn't authenticated user
     * yet. If that's the case, authentication should be made.
     *
     * @private
     *
     * @param {string} username is the username of the logged in user
     * @param {string} pass is the password of the logged in user
     *
     * @return {boolean} true if authentication should be made
     */

  }, {
    key: "shouldAuthenticate",
    value: function shouldAuthenticate(username, pass) {
      var hasCredentials = username && pass;
      var isAuthenticated = this.getLoggedUser() && this.getLoggedUser().getToken();
      return hasCredentials && !isAuthenticated;
    }
    /**
     * @param {User} user
     */

  }, {
    key: "setLoggedUser",
    value: function setLoggedUser(user) {
      this.loggedUser = user;
    }
    /**
     * @return {User}
     */

  }, {
    key: "getLoggedUser",
    value: function getLoggedUser() {
      return this.loggedUser;
    }
    /**
     * @param {HttpClient} httpClient
     * @return {AuthenticationService}
     */

  }, {
    key: "setHttpClient",
    value: function setHttpClient(httpClient) {
      this.httpClient = httpClient;
      return this;
    }
  }]);

  return AuthenticationService;
}();

module.exports = AuthenticationService;